//
//  KeyCodeToString.swift
//  a
//
//  Created by huatian on 16/4/3.
//  Copyright © 2016年 iosdevlog. All rights reserved.
//

import Foundation

func keyCodeToChar(keyCode: UInt16) -> String? {
    let kDL_ANSI_A : UInt16 = 0x00
    let kDL_ANSI_S : UInt16 = 0x01
    let kDL_ANSI_D : UInt16 = 0x02
    let kDL_ANSI_F : UInt16 = 0x03
    let kDL_ANSI_H : UInt16 = 0x04
    let kDL_ANSI_G : UInt16 = 0x05
    let kDL_ANSI_Z : UInt16 = 0x06
    let kDL_ANSI_X : UInt16 = 0x07
    let kDL_ANSI_C : UInt16 = 0x08
    let kDL_ANSI_V : UInt16 = 0x09
    let kDL_ANSI_B : UInt16 = 0x0B
    let kDL_ANSI_Q : UInt16 = 0x0C
    let kDL_ANSI_W : UInt16 = 0x0D
    let kDL_ANSI_E : UInt16 = 0x0E
    let kDL_ANSI_R : UInt16 = 0x0F
    let kDL_ANSI_Y : UInt16 = 0x10
    let kDL_ANSI_T : UInt16 = 0x11
    let kDL_ANSI_1 : UInt16 = 0x12
    let kDL_ANSI_2 : UInt16 = 0x13
    let kDL_ANSI_3 : UInt16 = 0x14
    let kDL_ANSI_4 : UInt16 = 0x15
    let kDL_ANSI_6 : UInt16 = 0x16
    let kDL_ANSI_5 : UInt16 = 0x17
    let kDL_ANSI_Equal : UInt16 = 0x18
    let kDL_ANSI_9 : UInt16 = 0x19
    let kDL_ANSI_7 : UInt16 = 0x1A
    let kDL_ANSI_Minus : UInt16 = 0x1B
    let kDL_ANSI_8 : UInt16 = 0x1C
    let kDL_ANSI_0 : UInt16 = 0x1D
    let kDL_ANSI_RightBracket: UInt16 = 0x1E
    let kDL_ANSI_O : UInt16 = 0x1F
    let kDL_ANSI_U : UInt16 = 0x20
    let kDL_ANSI_LeftBracket : UInt16 = 0x21
    let kDL_ANSI_I : UInt16 = 0x22
    let kDL_ANSI_P : UInt16 = 0x23
    let kDL_ANSI_L : UInt16 = 0x25
    let kDL_ANSI_J : UInt16 = 0x26
    let kDL_ANSI_Quote : UInt16 = 0x27
    let kDL_ANSI_K : UInt16 = 0x28
    let kDL_ANSI_Semicolon: UInt16 = 0x29
    let kDL_ANSI_Backslash: UInt16 = 0x2A
    let kDL_ANSI_Comma : UInt16 = 0x2B
    let kDL_ANSI_Slash : UInt16 = 0x2C
    let kDL_ANSI_N : UInt16 = 0x2D
    let kDL_ANSI_M : UInt16 = 0x2E
    let kDL_ANSI_Period: UInt16 = 0x2F
    let kDL_ANSI_Grave : UInt16 = 0x32
    let kDL_ANSI_KeypadDecimal: UInt16 = 0x41
    let kDL_ANSI_KeypadMultiply: UInt16 = 0x43
    let kDL_ANSI_KeypadPlus: UInt16 = 0x45
    let kDL_ANSI_KeypadClear : UInt16 = 0x47
    let kDL_ANSI_KeypadDivide: UInt16 = 0x4B
    let kDL_ANSI_KeypadEnter : UInt16 = 0x4C
    let kDL_ANSI_KeypadMinus : UInt16 = 0x4E
    let kDL_ANSI_KeypadEquals: UInt16 = 0x51
    let kDL_ANSI_Keypad0 : UInt16 = 0x52
    let kDL_ANSI_Keypad1 : UInt16 = 0x53
    let kDL_ANSI_Keypad2 : UInt16 = 0x54
    let kDL_ANSI_Keypad3 : UInt16 = 0x55
    let kDL_ANSI_Keypad4 : UInt16 = 0x56
    let kDL_ANSI_Keypad5 : UInt16 = 0x57
    let kDL_ANSI_Keypad6 : UInt16 = 0x58
    let kDL_ANSI_Keypad7 : UInt16 = 0x59
    let kDL_ANSI_Keypad8 : UInt16 = 0x5B
    let kDL_ANSI_Keypad9 : UInt16 = 0x5C
    
    let kDL_Return: UInt16 = 0x24
    let kDL_Tab: UInt16 = 0x30
    let kDL_Space: UInt16 = 0x31
    let kDL_Delete: UInt16 = 0x33
    let kDL_Escape: UInt16 = 0x35
    let kDL_Command: UInt16 = 0x37
    let kDL_Shift: UInt16 = 0x38
    let kDL_CapsLock : UInt16 = 0x39
    let kDL_Option: UInt16 = 0x3A
    let kDL_Control: UInt16 = 0x3B
    let kDL_RightShift: UInt16 = 0x3C
    let kDL_RightOption: UInt16 = 0x3D
    let kDL_RightControl : UInt16 = 0x3E
    let kDL_Function : UInt16 = 0x3F
    let kDL_F17: UInt16 = 0x40
    let kDL_VolumeUp : UInt16 = 0x48
    let kDL_VolumeDown: UInt16 = 0x49
    let kDL_Mute : UInt16 = 0x4A
    let kDL_F18: UInt16 = 0x4F
    let kDL_F19: UInt16 = 0x50
    let kDL_F20: UInt16 = 0x5A
    let kDL_F5: UInt16 = 0x60
    let kDL_F6: UInt16 = 0x61
    let kDL_F7: UInt16 = 0x62
    let kDL_F3: UInt16 = 0x63
    let kDL_F8: UInt16 = 0x64
    let kDL_F9: UInt16 = 0x65
    let kDL_F11: UInt16 = 0x67
    let kDL_F13: UInt16 = 0x69
    let kDL_F16: UInt16 = 0x6A
    let kDL_F14: UInt16 = 0x6B
    let kDL_F10: UInt16 = 0x6D
    let kDL_F12: UInt16 = 0x6F
    let kDL_F15: UInt16 = 0x71
    let kDL_Help : UInt16 = 0x72
    let kDL_Home : UInt16 = 0x73
    let kDL_PageUp: UInt16 = 0x74
    let kDL_ForwardDelete: UInt16 = 0x75
    let kDL_F4: UInt16 = 0x76
    let kDL_End: UInt16 = 0x77
    let kDL_F2: UInt16 = 0x78
    let kDL_PageDown : UInt16 = 0x79
    let kDL_F1: UInt16 = 0x7A
    let kDL_LeftArrow: UInt16 = 0x7B
    let kDL_RightArrow: UInt16 = 0x7C
    let kDL_DownArrow: UInt16 = 0x7D
    let kDL_UpArrow: UInt16 = 0x7E
    
    var str: String?
    switch keyCode {
    case kDL_ANSI_A: str = "A"
    case kDL_ANSI_S: str = "S"
    case kDL_ANSI_D: str = "D"
    case kDL_ANSI_F: str = "F"
    case kDL_ANSI_H: str = "H"
    case kDL_ANSI_G: str = "G"
    case kDL_ANSI_Z: str = "Z"
    case kDL_ANSI_X: str = "X"
    case kDL_ANSI_C: str = "C"
    case kDL_ANSI_V: str = "V"
    case kDL_ANSI_B: str = "B"
    case kDL_ANSI_Q: str = "Q"
    case kDL_ANSI_W: str = "W"
    case kDL_ANSI_E: str = "E"
    case kDL_ANSI_R: str = "R"
    case kDL_ANSI_Y: str = "Y"
    case kDL_ANSI_T: str = "T"
    case kDL_ANSI_1: str = "1"
    case kDL_ANSI_2: str = "2"
    case kDL_ANSI_3: str = "3"
    case kDL_ANSI_4: str = "4"
    case kDL_ANSI_6: str = "6"
    case kDL_ANSI_5: str = "5"
    case kDL_ANSI_Equal: str = "="
    case kDL_ANSI_9: str = "9"
    case kDL_ANSI_7: str = "7"
    case kDL_ANSI_Minus: str = "-"
    case kDL_ANSI_8: str = "8"
    case kDL_ANSI_0: str = "0"
    case kDL_ANSI_RightBracket: str = "]"
    case kDL_ANSI_O: str = "O"
    case kDL_ANSI_U: str = "U"
    case kDL_ANSI_LeftBracket: str = "["
    case kDL_ANSI_I: str = "I"
    case kDL_ANSI_P: str = "P"
    case kDL_ANSI_L: str = "L"
    case kDL_ANSI_J: str = "J"
    case kDL_ANSI_Quote: str = "\""
    case kDL_ANSI_K: str = "K"
    case kDL_ANSI_Semicolon : str = ";"
    case kDL_ANSI_Backslash : str = "\\"
    case kDL_ANSI_Comma: str = ","
    case kDL_ANSI_Slash: str = "/"
    case kDL_ANSI_N: str = "N"
    case kDL_ANSI_M: str = "M"
    case kDL_ANSI_Period: str = "."
    case kDL_ANSI_Grave: str = "Grave"
    case kDL_ANSI_KeypadDecimal : str = "KeypadDecimal"
    case kDL_ANSI_KeypadMultiply: str = "KeypadMultiply"
    case kDL_ANSI_KeypadPlus: str = "KeypadPlus"
    case kDL_ANSI_KeypadClear: str = "KeypadClear"
    case kDL_ANSI_KeypadDivide: str = "KeypadDivide"
    case kDL_ANSI_KeypadEnter: str = "KeypadEnter"
    case kDL_ANSI_KeypadMinus: str = "KeypadMinus"
    case kDL_ANSI_KeypadEquals: str = "KeypadEquals"
    case kDL_ANSI_Keypad0 : str = "Keypad0"
    case kDL_ANSI_Keypad1 : str = "Keypad1"
    case kDL_ANSI_Keypad2 : str = "Keypad2"
    case kDL_ANSI_Keypad3 : str = "Keypad3"
    case kDL_ANSI_Keypad4 : str = "Keypad4"
    case kDL_ANSI_Keypad5 : str = "Keypad5"
    case kDL_ANSI_Keypad6 : str = "Keypad6"
    case kDL_ANSI_Keypad7 : str = "Keypad7"
    case kDL_ANSI_Keypad8 : str = "Keypad8"
    case kDL_ANSI_Keypad9 : str = "Keypad9"
        
    case kDL_Return: str = "↩"
    case kDL_Tab: str = "⇥"
    case kDL_Space: str = "Space"
    case kDL_Delete: str = "⌫"
    case kDL_Escape: str = "⎋"
    case kDL_Command: str = "⌘"
    case kDL_Shift: str = "⇧"
    case kDL_CapsLock : str = "⇪"
    case kDL_Option: str = "⌥"
    case kDL_Control: str = "⌃"
    case kDL_RightShift: str = "R⇧"
    case kDL_RightOption: str = "R⌥"
    case kDL_RightControl : str = "R⌃"
    case kDL_Function : str = "Fn"
    case kDL_F17: str = "F17"
    case kDL_VolumeUp : str = "VolumeUp"
    case kDL_VolumeDown: str = "VolumeDown"
    case kDL_Mute : str = "Mute"
    case kDL_F18: str = "F18"
    case kDL_F19: str = "F19"
    case kDL_F20: str = "F20"
    case kDL_F5: str = "F5"
    case kDL_F6: str = "F6"
    case kDL_F7: str = "F7"
    case kDL_F3: str = "F3"
    case kDL_F8: str = "F8"
    case kDL_F9: str = "F9"
    case kDL_F11: str = "F11"
    case kDL_F13: str = "F13"
    case kDL_F16: str = "F16"
    case kDL_F14: str = "F14"
    case kDL_F10: str = "F10"
    case kDL_F12: str = "F12"
    case kDL_F15: str = "F15"
    case kDL_Help : str = "Help"
    case kDL_Home : str = "↖"
    case kDL_PageUp: str = "⇞"
    case kDL_ForwardDelete: str = "ForwardDelete"
    case kDL_F4: str = "F4"
    case kDL_End: str = "↘"
    case kDL_F2: str = "F2"
    case kDL_PageDown : str = "⇟"
    case kDL_F1: str = "F1"
    case kDL_LeftArrow: str = "←"
    case kDL_RightArrow: str = "→"
    case kDL_DownArrow: str = "↓"
    case kDL_UpArrow: str = "↑"
    default : break
    }
    return str;
}